/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import com.mysql.cj.xdevapi.Statement;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.*;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import javax.swing.text.Document;

/**
 *
 * @author ASUS
 */
public class PemesananTiketView extends javax.swing.JFrame {

    private Connection conn; // Koneksi variabel kedalam database
    private DefaultTableModel tableModel;
    private int selectedRow = -1;
    
    /**
     * Creates new form PemesananTiketView
     */
    public PemesananTiketView() {
        initComponents();
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/penjualan_tiket_pesawat", "root", ""); // Membuat Koneksi kedalam database
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database connection error: " + e.getMessage());
        }
        tableModel = (DefaultTableModel) tblPesanTiket.getModel();
        loadDataToTable();
        
         tblPesanTiket.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int row = tblPesanTiket.getSelectedRow();
                if (row != -1) {
                    selectedRow = row; // Menyimpan baris yang dipilih
                    tampilkanDataBaris(row);  // Menampilkan data di textfield
                }
            }
        });
        
        
       // Memuat data dari database
       
       btnPesan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                simpanPemesanan();  // Panggil fungsi simpanPemesanan saat tombol pesan ditekan
            }
        });
       
        btnCari.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCariActionPerformed(evt);
        }
        });
       
       btnEdit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (selectedRow != -1) {
                    updateDataPemesanan();  // Fungsi untuk memperbarui data
                } else {
                    JOptionPane.showMessageDialog(null, "Pilih data yang ingin diubah");
                }
            }
        });
       
         btnUlang.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetForm();  // Panggil fungsi resetForm saat tombol Ulang diklik
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNamaPenumpang = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbbKelas = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbbMaskapai = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtHargaTiket = new javax.swing.JTextField();
        btnPesan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnUlang = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnCetak = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        calendarPesan = new com.toedter.calendar.JDateChooser();
        calendarKeberangkatan = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPesanTiket = new javax.swing.JTable();
        btnkembali = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtCari = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtPromo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("FORM PEMESANAN TIKET");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(330, 330, 330))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jLabel2.setText("Nama Penumpang");

        jLabel3.setText("Kelas");

        cbbKelas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ekonomi", "Bisnis" }));

        jLabel4.setText("Maskapai");

        cbbMaskapai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lion Air", "Garuda Indonesia", "Citilink", "Singapore Airlines", "Air Asia", "Qatar Airways" }));

        jLabel5.setText("Harga Tiket");

        btnPesan.setBackground(new java.awt.Color(51, 255, 51));
        btnPesan.setText("Pesan");
        btnPesan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesanActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(204, 204, 204));
        btnEdit.setText("Edit");

        btnUlang.setBackground(new java.awt.Color(255, 255, 102));
        btnUlang.setText("Ulang");

        btnHapus.setBackground(new java.awt.Color(255, 51, 51));
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnCetak.setText("Cetak Tiket");
        btnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakActionPerformed(evt);
            }
        });

        jLabel6.setText("Tanggal Pesan");

        jLabel7.setText("Tanggal Keberangkatan");

        tblPesanTiket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Nama Penumpang", "Kelas", "Maskapai", "Tanggal Pesan", "Tanggal Keberangkatan", "Harga Tiket"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPesanTiket);

        btnkembali.setBackground(new java.awt.Color(0, 153, 153));
        btnkembali.setText("Kembali ke Halaman Utama");
        btnkembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnkembaliActionPerformed(evt);
            }
        });

        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        jLabel8.setText("Cari tiket penumpang berdasarkan nama penumpang");

        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });

        jLabel9.setText("Kode Promo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnkembali, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnPesan)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEdit)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnUlang)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnHapus)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCetak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCari)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPromo, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(calendarKeberangkatan, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                        .addComponent(calendarPesan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtNamaPenumpang)
                        .addComponent(cbbKelas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbbMaskapai, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtHargaTiket, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNamaPenumpang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbKelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbMaskapai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(calendarPesan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(calendarKeberangkatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHargaTiket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPromo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPesan)
                    .addComponent(btnEdit)
                    .addComponent(btnUlang)
                    .addComponent(btnHapus)
                    .addComponent(btnCetak))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnkembali, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(btnCari)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesanActionPerformed
    
    }//GEN-LAST:event_btnPesanActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        int selectedRow = tblPesanTiket.getSelectedRow();
    if (selectedRow != -1) {  // Pastikan ada baris yang dipilih
        // Ambil ID pemesanan dari kolom pertama yang berisi ID
        int idPemesanan = (int) tblPesanTiket.getValueAt(selectedRow, 0);
        
        // Konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus pemesanan dengan ID " + idPemesanan + "?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Koneksi ke database
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/penjualan_tiket_pesawat", "root", "");
                
                // Query untuk menghapus data berdasarkan ID
                String query = "DELETE FROM pemesanan WHERE id = ?";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setInt(1, idPemesanan);
                
                // Eksekusi query
                int rowsAffected = pst.executeUpdate();
                
                if (rowsAffected > 0) {
                    // Hapus baris dari tabel (JTable)
                    tableModel.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(this, "Pemesanan berhasil dihapus.");
                } else {
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.");
                }
                
                // Menutup koneksi
                conn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Silakan pilih data yang ingin dihapus.");
    }
    
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakActionPerformed
      int selectedRow = tblPesanTiket.getSelectedRow();
    
    if (selectedRow != -1) { 
        // Menerima data dari salah satu data
        int idPemesanan = (int) tableModel.getValueAt(selectedRow, 0);
        String namaPenumpang = tableModel.getValueAt(selectedRow, 1).toString();
        String kelas = tableModel.getValueAt(selectedRow, 2).toString();
        String maskapai = tableModel.getValueAt(selectedRow, 3).toString();
        Date tanggalPesan = (Date) tableModel.getValueAt(selectedRow, 4);
        Date tanggalKeberangkatan = (Date) tableModel.getValueAt(selectedRow, 5);
        double hargaTiket = (double) tableModel.getValueAt(selectedRow, 6);
        
        // Format tanggal
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd-MM-yyyy");
        String tanggalPesanStr = sdf.format(tanggalPesan);
        String tanggalKeberangkatanStr = sdf.format(tanggalKeberangkatan);
        
        // Membuat file menjadi .txt
        StringBuilder sb = new StringBuilder();
        sb.append("===== TIKET PESAWAT =====\n");
        sb.append("ID Pemesanan       : ").append(idPemesanan).append("\n");
        sb.append("Nama Penumpang     : ").append(namaPenumpang).append("\n");
        sb.append("Kelas              : ").append(kelas).append("\n");
        sb.append("Maskapai           : ").append(maskapai).append("\n");
        sb.append("Tanggal Pesan      : ").append(tanggalPesanStr).append("\n");
        sb.append("Tanggal Keberangkatan: ").append(tanggalKeberangkatanStr).append("\n");
        sb.append("Harga Tiket        : Rp ").append(String.format("%,.2f", hargaTiket)).append("\n");
        sb.append("========================\n");
        
        // Memilih file laporan disimpan dimana
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan Tiket sebagai...");
        // mMmberikan nama file sacara default
        fileChooser.setSelectedFile(new File("Tiket_Pemesanan_ID_" + idPemesanan + ".txt"));
        
        int userSelection = fileChooser.showSaveDialog(this);
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write(sb.toString());
                JOptionPane.showMessageDialog(this, "Tiket berhasil dicetak ke file:\n" + fileToSave.getAbsolutePath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mencetak tiket: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Penyimpanan tiket dibatalkan.");
        }
        
    } else {
        JOptionPane.showMessageDialog(this, "Silakan pilih data tiket yang ingin dicetak.");
    }  
    
    }//GEN-LAST:event_btnCetakActionPerformed

    private void btnkembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnkembaliActionPerformed
        PenjualanTiketView mainForm = new PenjualanTiketView();
        
        // Membuat mainForm dapat diakses
        mainForm.setVisible(true);
        
        // Menutup form
        this.dispose();
    }//GEN-LAST:event_btnkembaliActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        String namaCari = txtCari.getText().trim();

    if (namaCari.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Silakan masukkan nama penumpang untuk mencari.", "Input Kosong", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Query untuk mencari data berdasarkan nama penumpang
        String query = "SELECT * FROM pemesanan WHERE nama_penumpang LIKE ?";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setString(1, "%" + namaCari + "%"); // Menggunakan wildcard untuk pencarian yang lebih fleksibel

        ResultSet rs = pst.executeQuery();

        // Menghapus data yang ada sebelumnya di JTable
        tableModel.setRowCount(0);

        boolean ditemukan = false;

        // Menambahkan data hasil pencarian ke JTable
        while (rs.next()) {
            ditemukan = true;
            Object[] row = {
                rs.getInt("id"),
                rs.getString("nama_penumpang"),
                rs.getString("kelas"),
                rs.getString("maskapai"),
                rs.getDate("tanggal_pesan"),
                rs.getDate("tanggal_keberangkatan"),
                rs.getDouble("harga_tiket")
            };
            tableModel.addRow(row);
        }

        if (!ditemukan) {
            JOptionPane.showMessageDialog(this, "Tidak ada data yang cocok dengan nama penumpang: " + namaCari, "Data Tidak Ditemukan", JOptionPane.INFORMATION_MESSAGE);
        }

        rs.close();
        pst.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mencari data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnCariActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCariActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PemesananTiketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PemesananTiketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PemesananTiketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PemesananTiketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PemesananTiketView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnCetak;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnPesan;
    private javax.swing.JButton btnUlang;
    private javax.swing.JButton btnkembali;
    private com.toedter.calendar.JDateChooser calendarKeberangkatan;
    private com.toedter.calendar.JDateChooser calendarPesan;
    private javax.swing.JComboBox<String> cbbKelas;
    private javax.swing.JComboBox<String> cbbMaskapai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblPesanTiket;
    private javax.swing.JTextField txtCari;
    private javax.swing.JTextField txtHargaTiket;
    private javax.swing.JTextField txtNamaPenumpang;
    private javax.swing.JTextField txtPromo;
    // End of variables declaration//GEN-END:variables

    //Simpan data pesanan ke database
    private void simpanPemesanan() {
    String namaPenumpang = txtNamaPenumpang.getText();
    String kelas = cbbKelas.getSelectedItem().toString();
    String maskapai = cbbMaskapai.getSelectedItem().toString();
    java.sql.Date tanggalPesan = new java.sql.Date(calendarPesan.getDate().getTime());
    java.sql.Date tanggalKeberangkatan = new java.sql.Date(calendarKeberangkatan.getDate().getTime());
    double hargaTiket = Double.parseDouble(txtHargaTiket.getText());
    
    // Mengambil kode promo
    String promoCode = txtPromo.getText();
    
    // Terapkan kode promo
    hargaTiket = applyPromoCode(promoCode, hargaTiket);  // Menghitung harga setelah diskon

    try {
        // Query untuk menyimpan data
        String query = "INSERT INTO pemesanan (nama_penumpang, kelas, maskapai, tanggal_pesan, tanggal_keberangkatan, harga_tiket) "
                + "VALUES (?, ?, ?, ?, ?, ?)";

        PreparedStatement pst = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);

        // Set parameter query
        pst.setString(1, namaPenumpang);
        pst.setString(2, kelas);
        pst.setString(3, maskapai);
        pst.setDate(4, tanggalPesan);
        pst.setDate(5, tanggalKeberangkatan);
        pst.setDouble(6, hargaTiket);

        // Eksekusi query
        pst.executeUpdate();

        // Ambil ID yang baru dimasukkan
        ResultSet generatedKeys = pst.getGeneratedKeys();
        int generatedId = -1;
        if (generatedKeys.next()) {
            generatedId = generatedKeys.getInt(1);  // Ambil ID yang baru
        }

        // Menampilkan pesan sukses
        JOptionPane.showMessageDialog(this, "Pemesanan Tiket Berhasil Disimpan");

        // Menambahkan data yang baru disimpan ke dalam JTable
        Object[] row = {
            generatedId,  // Menambahkan ID yang baru
            namaPenumpang,
            kelas,
            maskapai,
            tanggalPesan,
            tanggalKeberangkatan,
            hargaTiket
        };
        tableModel.addRow(row);  // Menambahkan data ke dalam JTable

        // Menutup koneksi
        pst.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + ex.getMessage());
    }
}

// Memuat data dari database
private void loadDataToTable() {
        try {
            String query = "SELECT * FROM pemesanan";  // Query untuk mengambil semua data pemesanan
            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Menghapus data yang ada sebelumnya di JTable
            tableModel.setRowCount(0);

            // Menambahkan data baru ke JTable
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id"),
                    rs.getString("nama_penumpang"),
                    rs.getString("kelas"),
                    rs.getString("maskapai"),
                    rs.getDate("tanggal_pesan"),
                    rs.getDate("tanggal_keberangkatan"),
                    rs.getDouble("harga_tiket")
                };
                tableModel.addRow(row);  // Menambahkan data ke dalam JTable
            }
            
            rs.close();
            pst.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + ex.getMessage());
        }
    }    
 
// Tampilkan data
private void tampilkanDataBaris(int row) {
        // Ambil data dari JTable dan tampilkan di textfield
        txtNamaPenumpang.setText(tableModel.getValueAt(row, 1).toString());
        cbbKelas.setSelectedItem(tableModel.getValueAt(row, 2).toString());
        cbbMaskapai.setSelectedItem(tableModel.getValueAt(row, 3).toString());
        calendarPesan.setDate((Date) tableModel.getValueAt(row, 4));
        calendarKeberangkatan.setDate((Date) tableModel.getValueAt(row, 5));
        txtHargaTiket.setText(tableModel.getValueAt(row, 6).toString());
    }

//Mengupdate data setiap ada perubahan
private void updateDataPemesanan() {
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih data yang ingin diubah");
        return;
    }

    String namaPenumpang = txtNamaPenumpang.getText();
    String kelas = cbbKelas.getSelectedItem().toString();
    String maskapai = cbbMaskapai.getSelectedItem().toString();
    java.sql.Date tanggalPesan = new java.sql.Date(calendarPesan.getDate().getTime());
    java.sql.Date tanggalKeberangkatan = new java.sql.Date(calendarKeberangkatan.getDate().getTime());
    double hargaTiket = Double.parseDouble(txtHargaTiket.getText());

    // Mengambil kode promo
    String promoCode = txtPromo.getText();
    
    // Terapkan kode promo
    hargaTiket = applyPromoCode(promoCode, hargaTiket);  // Menghitung harga setelah diskon
    
    int id = (int) tableModel.getValueAt(selectedRow, 0); // Ambil ID dari baris yang dipilih

    try {
        // Query untuk update data
        String query = "UPDATE pemesanan SET nama_penumpang = ?, kelas = ?, maskapai = ?, tanggal_pesan = ?, "
                + "tanggal_keberangkatan = ?, harga_tiket = ? WHERE id = ?";

        PreparedStatement pst = conn.prepareStatement(query);

        // Set parameter query
        pst.setString(1, namaPenumpang);
        pst.setString(2, kelas);
        pst.setString(3, maskapai);
        pst.setDate(4, tanggalPesan);
        pst.setDate(5, tanggalKeberangkatan);
        pst.setDouble(6, hargaTiket);
        pst.setInt(7, id);

        // Eksekusi update
        pst.executeUpdate();

        // Menampilkan pesan sukses
        JOptionPane.showMessageDialog(this, "Pemesanan Tiket Berhasil Diperbarui");

        // Update data yang diubah di JTable
        tableModel.setValueAt(namaPenumpang, selectedRow, 1);
        tableModel.setValueAt(kelas, selectedRow, 2);
        tableModel.setValueAt(maskapai, selectedRow, 3);
        tableModel.setValueAt(tanggalPesan, selectedRow, 4);
        tableModel.setValueAt(tanggalKeberangkatan, selectedRow, 5);
        tableModel.setValueAt(hargaTiket, selectedRow, 6);

        pst.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + ex.getMessage());
    }
}

//Menghapus semua inputan
private void resetForm() {
    // Mengosongkan semua field input
    txtNamaPenumpang.setText("");
    cbbKelas.setSelectedIndex(0);      // Kembali ke pilihan default
    cbbMaskapai.setSelectedIndex(0);   // Kembali ke pilihan default
    
    // Mengatur tanggal ke hari ini
    java.util.Date today = new java.util.Date();  // Mendapatkan tanggal & waktu saat ini
    calendarPesan.setDate(today);
    calendarKeberangkatan.setDate(today);
    
    txtHargaTiket.setText("");
    txtPromo.setText("");  // Mengosongkan kode promo
}

//Menggunakan kode promo
private double applyPromoCode(String promoCode, double hargaTiket) {
    double discount = 0;
    
    // Validasi kode promo
    switch (promoCode) {
        case "DISKONAKHIRTAHUN":
            discount = 0.3;  // Diskon 30%
            break;
        case "DISKONMUANTAP":
            discount = 0.2;  // Diskon 20%
            break;
        case "AYOKHEPI":
            discount = 0.9;    // Diskon 90%
            break;
        default:
            JOptionPane.showMessageDialog(this, "Kode promo tidak valid!");
            break;
    }

    // Menghitung harga tiket setelah diskon
    return hargaTiket - (hargaTiket * discount);
}

}
